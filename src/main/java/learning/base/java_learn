#String:
    String当中与转换相关的常用方法有:
        public char[] toCharArray(): 将当前字符串拆分成为字符数组作为返回值。
        public byte[] getBytes(): 获得当前字符串底层的字节数组。
        public String replace(CharSequence oldString, CharSequence newString):将所有出现的老字符串替换成为新的字符串，返回替换之后的结果新字符串

    分割字符串的方法:
        public String[] split(String regex): 按照参数的规则，将字符串切分成为若干部分。


#静态代码块格式:
    public class 类名称{
        static {
        //静态代码块的内容
        }
    }
    特点:
        当第一次用到本类时，静态代码块执行唯一的一次。静态内容总是优先于非静态，所以静态代码块比构造方法先执行。
    静态代码块的典型用途:
        用来一次性地对静态成员变量进行赋值。


#Arrays
java. util .Arrays是一 个与数组相关的工具类，里面提供了大量静态方法，用来实现数组常见的操作。
    public static String toString(数组): 将参数数组变成字符串(按照默认格式: [元素1,元素2,元素3...])
    public static void sort(数组): 按照默认升序(从小到大)对数组的元素进行排序。
    备注:
        1日如果是数值，sort默认按照升序从小到大
        2. 如果是字符串，sort默认按照字母升序
        3.如果是自定义的类型，那么这个自定义的类需要有Comparable或者Comparator接口的支持。


如何才能知道一个父类引用的对象，本来是什么子类?
    格式:
        对象 instanceof 类名称
        这将会得到一个boolean值结果，也就是判断前面的对象能不能当做后面类型的实例。

java. util .Map<k, v>集合
Map集合的特点:
    1.Map集合是一个双列集合, -个元素包含两个值(- -个key,- 个value)
    2.Map集合中的元素，key和value的数据类型可以相同，也可以不同
    3.Map集合中的元素, key是不允许重复的，value是可以重复的
    4.Map集合中的元素, key和value是- --对应
java . util . HashMop<k, v>集合implements Map<k, v>接口
HashMap集合的特点:
    1.HashMap集合底层是哈希表:查询的速度特别的快
    JDK1.8之前数组+单向链表
    JDK1.8之后:数组+单向链表/红黑树(链表的长度超过8) :提高查询的速度
    2. hashMap集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致
    java.util. LinkedHashMap<k, v>集合extends HashMap<k, v>集合
LinkedHashMap的特点:
    1. LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)
    2. LinkedHashMap集合是一个有序的集合 ,存储元素和取出元素的顺序是一致的
Map接口中定义了很多方法,常用的如下:
    public V                    put(K key, V value)]:把指定的键与指定的值添加到Map集合中。
    public v                    remove(Object key) :把指定的键所对应的键值对元素在Map集合中删除，返回被删除元素的值。
    public V                    get(Object key) :根据指定的键，在Map集合中获取对应的值。
    boolean                     containsKey(Object key) :判断集合中是否包含指定的键。
    public Set<K>               keySet() :获取Map集合中所有的键，存储到Set集合中。
    public Set<Map.Entry<K,V>>  entrySet() :获取到Map集合中所有的键值对对象的集合(Set集合)。



#Swing
    JFrame:
    public static void main(String[] args) {
        JFrame f = new JFrame( "窗体标题");//创建窗体对象
        f. setVisible(true);/ /设置窗体可见
        /*
        *窗体关闭规则
        *EXIT_ ON_CLOSE :隐藏窗体，并停止程序
        *DO_ NOTHING_ON_CLOSE:无任何操作
        *HIDE_ON_ CLOSE: 隐藏窗体，但不停止程序
        * DISPOSE_ ON_CLOSE :释放窗体资源
        */
        f. setDefaultCloseOperation(JFrame. EXIT_ ON_ CLOSE);
        //f.setSize(300，200);//设置窗体的大小， 单位:像素
        //f. setLocation(200，200);//设置坐标， 单位:像素.
        f. setBounds(200, 200， 300， 200);//设置窗体坐标和大小， 单位:像素
        Container C = f. getContentPane( );/ /获取窗体容器
        c. setBackground( Color . WHITE); //设置背景颜色
        JLabel 1=new JLabel("这是一个窗体");
        c. add(1); / /添加组件
        //C. remove(1);/ /删除组件
        c. validate(); / /验证容器中的組件
        //f. setContentPane(c);//重新载入容器

        f. setResizable(false);//设置窗体是否可以改变大小
        System. out . print1n("x="+f. getX()+" y="+f.getY()) ;
    }
