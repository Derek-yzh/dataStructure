#字节输出流:
    [ java. io.outputStream ]抽象类是表示字节输出流的所有类的超类,将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。
    ●public void close() :关闭此输出流并释放与此流相关联的任何系统资源。
    ●public void flush() :刷新此输出流并强制任何缓冲的输出字节被写出。
    ●public void write(byte[] b) :将b.length字节(数组中的字节)从指定的字节数组写入此输出流。
        public void write(byte[] b):将b.length个字节从指定的字节数组写入此输出流。
        一次写多个字节:
            如果写的第一个字节是 正数(0-127),那么显示的时候会查询ASCII表
            如果写的第一个字节是负数，那第一个字节会和第二个字节， 两个字节组成-个中文显示,查询系统默认码表(GBK)
    ●public void write(byte[] b, int off, int len) :从指定的字节数组写入len字节,从偏移量off开始输出到此输出流。
           public void write(byte[] b, int off, int len) :把字节数组的一部分写入到文件中
               int off:数组的开始索引
               int Len:写几个字节
                   例如:  fos. write(bytes, off: 1, len: 2);
    ●public abstract void write(int b)] :将指定的一个字节输出流。
    /*
    写入字符的方法(String类的方法):可以使用String类中的方法把字符串,转换为字节数组
        byte[] getBytes()   把字符串转换为字节数组
            byte[] bytes2 =“你好".getBytes();
    */
    小贴士:close方法,当完成流的操作时,必须调用此方法,释放系统资源。

#文件输出流:
    java. io. FileOutputStream extends OutputStream
    FileOutputStream:文件字节输出流
    作用:把内存中的数据写入到硬盘的文件中
    构造方法:
        FileOutputStream(String name )创建一个向具 有指定名称的文件中写入数据的输出文件流。
        FileOutputStream(File file) 创建-一个向指定File 对象表示的文件中写入数据的文件输出流。
        参数:写入数据的目的
            String name:目的地是- -个文件的路径
            File. file:目的地是- 一个文件
    构造方法的作用:
        1.创建一个FileOutputStream对象
        2.会根据构造方法中传递的文件/文件路径，创建一个空的文件
        3.会把FileOutputStream对象指向创建好的文件

    写入数据的原理(内存-- >硬盘)
        java程序-->JWM( java虚拟机)-->OS(操作系统)-->0S调用写数据的方法-- >把数据写入到文件中

    字节输出流的使用步骤(重点):
        1.创建一一个FileOutputStream对象,构造方法中传递写入数据的目的地
        2.调用FileOutputStream对象中的方法write,把数据写入到文件中
        3.释放资源(流使用会占用一定的内存,使用完毕要把内存清空,提供程序的效率)

    #追加写/续写:使用两个参数的构造方法
            FileOutputStream(String name, boolean append)创建一个向具有指定name的文件中写入数据的输出文件流。
            FileOutputStream(File file, boolean append) 创建一一个向指定File 对象表示的文件中写入数据的文件输出流。
        参数:
            String name, File file:写入数据的目的地
            boolean append:追加写开关
                true :创建对象不会覆盖源文件继续在文件的末尾追加写数据
                false:创建一-个新文件,覆盖源文件
    #写换行:写换行符号
        windows: \r\n   使用:fos.write("\r\n".getBytes());
        linux:/n
        mac:/r

=============================================================================================================================
=============================================================================================================================

#字节输入流:
    java. io. InputStream   此抽象类是表示字节输入流的所有类的超类。
    定义了所有子类共性的方法:
        int read()         从输入流中读取数据的下-一个字节。
        int read(byte[] b)  从输入流中读取一定数量的字节，并将其存储在缓冲区数组b中。
            明确两件事情:
            1.方法的参数byte[ ]的作用?
                起到缓冲作用，存储每次读取到的多个字节
                数组的长度-把定义为1024(1kb)或者1024的整数倍
            2.方法的返回值int是什么?
                每次读取的有效字节个数
        void close()        关闭此输入流并释放与该流关联的所有系统资源。

#文件输入流:
    java. io. FileInputStream extends InputStream
    FileInputStream:文件字节输入流
    作用:把硬盘文件中的数据,读取到内存中使用
    构造方法:
        FiLeInputStream(String name )
        FiLeInputStream(File file)
        参数:读取文件的数据源
            String name :文件的路径
            File file:文件
    构造方法的作用:
        1.会创建一个FileInputStream对象
        2.会把FileInputStream     对象指定构造方法中要读取的文件
    读取数据的原理(硬盘-- >内存)
        java程序-->JVM- ->05-- >0s读取数据的方法-- >读取文件
    字节输入流的使用步骤(重点):
        1.创建FileInputStream对象，构造方法中绑定要读取的数据源
        2.使用FileInputStream对象中的方法read,读取文件
        3.释放资源
    例子(read()方法):
        int len = e; //记录读取到的字节
        while((len = fis.read())!--1){
        System.out.println((char)1en);
        }
    例子(read(byte[] b)f方法):
        需知:
            String类的构造方法
            String(byte[] bytes) :把字节数组转换为字符串
            String(byte[] bytes, int offset, int length) 把字节数组的一部分转换为字符串offset :数组的开始索引length :转换的字节个数
        byte[] bytes = new byte[1024];
        int len = 0;
        while((len - fis.read(bytes)) != -1){
            //System.out.println(new String(bytes));
            System.out.println(new String(bytes,0,len));
        }

    注意:
        使用字节流读取中文文件中1个中文
            GBK:占用两个字节
            UTF -8:占用3个字节

=============================================================================================================================
=============================================================================================================================

#字符输入流[Reader]:
    [ java. io. Reader ]抽象类是表示用于读取字符流的所有类的超类,可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。
    ●public void close() :关闭此流并释放与此流相关联的任何系统资源。
    ●public int read():从输入流读取一个字符。
    ●public int read(char[] cbuf): 从输入流中读取一些字符,并将它们存储到字符数组cbuf中。

#FileReader:
    java. io. FiLeReader extends InputStreamReader extends Reader
    FileReader :文件字符输入流
    作用:把硬盘文件中的数据以字符的方式读取到内存中
    构造方法:
        FileReader(String fileName)
        FileReader(File file)
        参数:读取文件的数据源
            String fileName :文件的路径
            File file:一个文件
    FileReader构造方法的作用:
        1.创建一个FileReader对象
        2.会把FileReader对象指向要读职的文件
    字符输入流的使用步骤:
        1.创建FileReader对象,构造方法中绑定要读取的数据源
        2.使用FileReader对象中的方法read读取文件
        3.释放资源
    例子:
        //int read(char[] cbuf) 一次读取多个字符，将字符读入数组。
        char[] cs = new char[1024];//存储读取到的多个字符
        int len = 0;//记录的是每次读取的有效字符个数
        while((len = fr.read(cs))!=-1){
            /*
            String类的构造方法
            String(char[] value) 把字符数组转换为字符串
            String(char[] value, int offset, int count) 把字符数组的一部分转换为字符串offset数组的开始索引count转换的个数
            */
        System.out.print1n(new String(cs,0,1en));
        }

#字符输出流[Writer]:
    java. io. Writer:字符输出流是所有字符输出流的最顶层的父类,是一个抽象类
    共性的成员方法:
        void write(int c)写入单个字符。
        void write(char[] cbuf)写入字符数组。
        abstract void write(char[] cbuf, int off, int len)写入字符数组的某-部分, off数组的开始索引, Len写的字符个数。
        void write(String str)写入字符串。
        void write(String str, int off, int len) 写入字符串的某一部分， off字符串的开始索引, len写的字符个数。
        void flush()刷新该流的缓冲。
        void close()关闭此流,但要先刷新它。

        *flush方法和close方法的区别
            - flush :刷新缓冲区，流对象可以继续使用。
            - close :先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。

#FileWriter:
    java. io. FileWriter extends OutputStreamWriter extends Writer
    FileWriter:文件字符输出流
    作用:把内存中字符数据写入到文件中
    构造方法:
        FileWriter(File file)根据给定的File 对象构造一个FileWriter 对象。
        FileWriter(String fileName) 根据给定的文件名构造一个FileWriter 对象。
        参数:写入数据的目的地
            String fileName :文件的路径
            File file:是一个文件
    构造方法的作用:
        1.会创建一-个FileWriter对象
        2.会根据构造方法中传递的文件/文件的路径,创建文件
        3.会把FiLeWriter对象指向创建好的文件
    字符输出流的使用步骤(重点):
        1.创建FileWriter对象,构造方法中绑定要写入数据的目的地
        2 使用FileWriter中的方法write,把数据写入到内存缓冲区中(字符转换为字节的过程)
        3.使用FileWriter中的方法flush,把内存缓冲区中的数据,刷新到文件中
        4.释放资源(会先把内存缓冲区中的数据刷新到文件中
    续写和换行
        续写，追加写:使用两个参数的构造方法
            FileWriter(String fileName, boolean append)
            FileWriter(File file, boolean append)
            参数:
                String fileName,File file:写入数据的目的地
                boolean append:续写开关true:不会创建新的文件覆盖源文件,可以续写; false:创建新的文件覆盖源文件
        换行:换行符号
            windows: /r/n
            linux:/n
            mac:/r
            换行例子:
                for(int i = 0; i < 10; i++){
                fw.write("HelloWorld"+i+"\r\n");
                }
                fw. close();

=============================================================================================================================
=============================================================================================================================

#缓冲流:
    缓冲流,也叫高效流,是对4个基本的Filexxx流的增强,所以也是4个流,按照数据类型分类:
    ●字节缓冲流: BufferedInputStream, BuSfferedOutputStream
    ●字符缓冲流: BufferedReader, BufferedWriter
    缓冲流的基本原理:在创建流对象时,会创建-个内置的默认大小的缓冲区数组,通过缓冲区读写,
                   减少系统I0次数,从而提高读写的效率。

#字节缓冲输出流:
    java. io. BufferedOutputStream extends OutputStream
    BufferedOutputStream:字节缓冲输出流
    继承自父类的共性成员方法:
        public void close() :关闭此输出流并释放与此流相关联的任何系统资源。
        public void flush() :刷新此输出流并强制任何缓中的输出字节被写出。
        public void write(byte[] b):将b. Length字节从指定的字节数组写入此输出流。
        public void write(byte[] b, int off, int len) : 从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。
        public abstract void write(int b) :将指定的字节输出流。
    构造方法:
        BufferedOutputStream(outputStream out)创建一个新的缓冲输出流，以将数据写入指定的底层输出流.
        BufferedOutputStream(outputStream out, int size) 创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流.
        参数:
            OutputStream out :字节输出流
            我们可以传递FileOutputStream, 缓冲流会给FileOutputStream增加一个缓冲区,提高FileOutputStream的写入效率
            int size :指定缓冲流内部缓冲区的大小,不指定默认
    使用步骤(重点)
        1.创建FileOutputStream对象,构造方法中绑定要输出的目的地
        2.创建BufferedOutputStream对象,构造方法中传递FileOutputStream对象对象,提高FileOutputStream对象效率
        3.使用BufferedOutputStream对象中的方法write,把数据写入到内部缓冲区中
        4.使用BufferedOutputStream对象中的方法flush,把内部缓冲区中的数据,刷新到文件中
        5.释放资源(会先调用flush方法刷新数据,第4部可以省略)

#字节缓冲输入流:
    java. io. BufferedInputStream extends InputStream
    BufferedInputStream:字节缓冲输入流
    继承自父类的成员方法:
        int read( )从输入流中读取数据的下一个字节。
        int read(byte[] b)从输入流中读取一定数量的字节，并将其存储在缓冲区数组b中。
        void close()关闭此输入流并释放与该流关联的所有系统资源。
    构造方法:
        BufferedInputStream(InputStream in) 创建一个 BufferedInputStream 并保存其参数,即输入流in,以便将来使用。
        BufferedInputStream(InputStream in, int size) 创建具有指定缓冲区大小的BufferedInputStream 并保存其参数，即输入流in
        参数:
            InputStream in:字节输入流
            我们可以传递FileInputStream,缓冲流会给FileInputStream增加一个缓冲区,提高FileInputStream的读取效率
            int size :指定缓冲流内部缓冲区的大小，不指定默认
    使用步骤(重点):
        1.创建FileInputStream对象,构造方法中绑定要读取的数据源
        2.创建BufferedInputStream对象,构造方法中传递FileInputStream对象,提高FileInputStream对象的读取效率
        3.使用BufferedInputStream对象中的方法read,读取文件
        4.释放资源

#字符缓冲输出流:
    java. io. BufferedWriter. extends Writer
    BufferedWriter:字符缓冲输出流
    继承自父类的共性成员方法:
        void write(int C)写入单个字符。
        void write(char[] cbuf)写入字符数组。
        abstract void write(char[] cbuf, int off, int len)写入字符数组的某-部分, off数组的开始索引, Len写的字符个数。
        void write(String str)写入字符串。
        void write(String str, int off, int len) 写入字符串的某-部分, off字符串的开始索引，len写的字符个数。
        void flush()刷新该流的缓冲。
        void close() 关闭此流，但要先刷新它。
    构造方法:
        BufferedWriter(Writer out) 创建一个使用默认大小输出缓冲区的缓冲字符输出流。
        BufferedWriter(Writer out, int sz)创建一个使用给定大小输出缓冲区的新缓冲字符输出流。
        参数:
        Writer. out :字符输出流
        我们可以传递FileWriter,缓冲流会给FileWriter增加一个缓冲区,提高FileWriter的写入效率
        int sz :指定缓冲区的大小，不写默认大小
    特有的成员方法:
        void newline() 写入一个行分隔符。会根据不同的操作系统,获取不同的行分隔符
    使用步骤:
        1.创建字符缓冲输出流对象,构造方法中传递字符输出流
        2.调用字符缓冲输出流中的方法write,把数据写入到内存缓冲区中
        3.调用字符缓冲输出流中的方法flush,把内存缓冲区中的数据,刷新到文件中
        4.释放资源

#字符缓冲输入流:
    java. io. BufferedReader extends Reader
    继承自父类的共性成员方法:
        int read() 读取单个字符并返回。
        int read(char[] cbuf)- 次读取多个字符，将字符读入数组。
        void close() 关闭该流并释放与之关联的所有资源。
    构造方法:
        BufferedReader(Reader in)   创建一个使用默认大小输入缓冲区的缓冲字符输入流。
        BufferedReader(Reader in, int sz)   创建一个使用指定大小输入缓冲区的缓冲字符输入流。
        参数:
            Reader in:字符输入流
            我们可以传递FileReader,缓冲流会给FileReader增加-一个缓冲区,提高FileReader的读取效率
    特有的成员方法:
        String readline() 读取一个文本行。读取一行数据
            行的终止符号:通过下列字符之一即可认为某行已终止:换行('\n'). 回车('\r') 或回车后直接跟着换行(\r\n)。
        返回值:
            包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回null
    使用步骤:
        1.创建字符缓冲输入流对象,构造方法中传递字符输入流
        2.使用字符缓冲输入流对象中的方法read/readL ine读取文本
        3.释放资源.

    例子:
        String line;
        while((line = br. readLine())! =nu1l){
        System. out. println(ine);





