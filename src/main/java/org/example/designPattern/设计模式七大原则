
##设计模式常用的七大原则有:(设计模式为什么这样设计的依据)
    1) 单一职责原则
         对类来说的，即一个类应该只负责-项职责。如类A负责两个不同职责:职责1,职责2。当职责1需求变更
        而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为Al, A2
    2) 接口隔离原则
         客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上
        一个类对另一个类的依赖:通过接口产生依赖
    3) 依赖倒转(倒置)原则
        依赖倒转原则(Dependence Inversion Principle)是指:
            1)高层模块不应该依赖低层模块， 二者都应该依赖其抽象
            2)抽象不应该依赖细节，细节应该依赖抽象
            3)依赖倒转(倒置)的中心思想是面向接口编程
            4)依赖倒转原则是基于这样的设计理念:相对于细节的多变性，抽象的东西要稳定的多。
                以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。
                在java中，抽象指的是接口或抽象类，细节就是具体的实现类
            5)使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，
                把展现细节的任务交给他们的实现类去完成
        注意事项:
            1)低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好.
            2)变量的声明类型尽量是抽象类或接口,这样我们的变量引用和实际对象间，就存在
                一个缓冲层，利于程序扩展和优化
            3)继承时遵循里氏替换原则
    4) 里氏替换原则
        OO中的继承性的思考和说明:
            1)继承包含这样一层含义: 父类中凡是已经实现好的方法，实际.上是在设定规范和契
                约，虽然它不强制要求所有的子类必须遵循这些契约，但是如果子类对这些已经实
                现的方法任意修改，就会对整个继承体系造成破坏。
            2)继承在给程序设计带来便利的同时，**也带来了弊端。比如使用继承会给程序带来侵入性**
                程序的可移植性降低，增加对象间的耦合性，如果-一个类被其他的类所继承，
                则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子
                类的功能都有可能产生故障
            3)问题提出:在编程中，如何正确的使用继承? =>里氏替换原则
        基本介绍:
        1)里氏替换原则(Liskov Substitution Principle)在1988年由麻省理工学院姓里的女士提出的
        2) 如果对每个类型为T1的对象o1,都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的
            对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。换句话说，
            所有引用基类的地方必须能透明地使用其子类的对象。
        3) 在使用继承时，遵循里氏替换原则，*在子类中尽量不要重写父类的方法*
        4) 里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在适当的情况下
            可以通过**聚合，组合，依赖**来解决问题
    5) 开闭原则 ocp
        基本介绍:
            1)开闭原则(Open Closed Principle)是编程中最基础、最重要的设计原则
            2)一个软件实体如类，**模块和函数应该对扩展开放(对提供方)，对修改关闭(使用方)**。
                用抽象构建框架，用实现扩展细节。
            3)当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已
                有的代码来实现变化。
            4)编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。
    6) 迪米特法则
        基本介绍:
            1)一个对象应该对其他对象保持最少的了解
            2)类与类关系越密切，耦合度越大
            3)迪米特法则(Demeter Principle)又叫*最少知道原则*，即*一个类对自已依赖的类知道的
                越少越好***。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内
                部。对外除了提供的public方法，不对外泄露任何信息
            4)迪米特法则还有个更简单的定义:只与直接的朋友通信
            5) *直接的朋友*:每个对象都会与其他对象由耦合关系，只要两个对象之间有耦合关系，
                我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合
                等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而
                出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量
                的形式出现在类的内部。
        迪米特法则注意事项和细节:
            1)迪米特法则的核心是降低类之间的耦合
            2)但是注意:由于每个类都减少了不必要的依赖，因此迪米特法则只是要求降低
                类间(对象间)耦合关系，并不是要求完全没有 依赖关系
    7) 合成复用原则
        基本介绍:
            原则是尽量使用合成/聚合的方式，而不是使用继承
                依赖:使用、传参(合成类似于这样) fun(A a){};
                聚合:设置属性 private A a; setA(A:a);
                组合:在属性直接new: private A a = newA();

类之间的关系:
    依赖dependency:A使用了B A依赖B     1)类中用到了对方2)如果是类的成员属性
                    3)如果是方法的返回类型4)是方法接收的参数类型5)方法中使用到
    泛化generalization(继承):如果A继承B  A和B存在泛化关系 ->泛化就是继承
    实现implementation:A实现了B接口  A实现B
    关联association:类与类之间的练习 {A类中private B b = newB();[单向一对一关系]
                        B类中有:private A a = newA();[单向一对一关系]}双向一对一关系
    聚合aggregation:关联关系的一种特例  表示的是整体和部分的关系，整体与部分可以分开。
      例如电脑类有鼠标类属性,也可以没有鼠标类属性 鼠标类可以与电脑类分离,具有关联的导航性与多重性。
    组合composition:也是整体与部分的关系，但是整体与部分不可以分开。
        例如电脑必须要有cpu 则电脑与cpu是组合关系,具有关联的导航性与多重性。


设计原则核心思想:
    1)找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代
    码混在一起 。
    2)针对接口编程，而不是针对实现编程。
    3)为了交互对象之间的松耦合设计而努力

设计模式的目的:
设计模式是为了让程序(软件),具有更好的:
    1)代码重用性(即:相同功能的代码，不用多次编写)
    2)可读性(即:编程规范性,便于其他程序员的阅读和理解)
    3)可扩展性(即:当需要增加新的功能时，非常的方便，称为可维护)
    4)可靠性(即:当我们增加新的功能后，对原来的功能没有影响)
    5)使程序呈现高内聚，低耦合的特性
分享金句:
    设计模式包含了面向对象的精髓，"懂了设计模式，你就懂了面向对象分析和设计(OOA/D)的精要"