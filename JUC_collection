##JUC java.util.concurrent(并发)

1.1进程/线程
1.2并发/并行(parallel)

2.三个包
java.util.concurrent
java.util.concurrent.atomic(原子)
java.util.concurrent.locks




##Collection:
Collection集合常用方法
    boolean add(E e);   向集合中添加元素
    boolean remove(E e);删除集合中的某个元素
    void clear();       清空集合所有的元素
    boolean contains(E e);判断集合中是否包含某个元素
    boolean isEmpty();  判断集合是否为空
    int size();         获取集合的长度
    Object] toArray();  将集合转成一个数组
    Iterator<E> iterator() 返回在此collection 的元素上进行迭代的迭代器

##Iterator接口的常用方法如下:
    public E next() :返回迭代的下一个元素。
    public boolean hasNext() :如果仍有元素可以迭代,则返回true

泛型:是一种未知的数据类型,当我们不知道使用什么数据类型的时候可以使用泛型
泛型也可以看出是一 个变量用来接收数据类型
E e: Element元素
T t: Type类型
ArrayList集合在定义的时候不知道集合中都会存储什么类型的数据,所以类型使用泛型
E:末知的数据类型

##泛型通配符(了解)
当使用泛型类或者接口时,传递的数据中,泛型类型不确定,可以通过通配符K?>表示。但是--旦使用泛型的通配
符后,只能使用Object类中的共性方法,集合中元素自身方法无法使用。
通配符基本使用:
    泛型的通配符:不知道使用什么类型来接收的时候,此时可以使用??表示未知通配符。
    此时只能接受数据,不能往该集合中存储数据。

##List接口的特点:
    1.有序的集合,存储元素和取出元素的顺序是一致的(存储123 取出123)
    2.有索引,包含了-些带索引的方法
    3.允许存储重复的元素
    List接口中带索引的方法(特有):
        public void add(int index, E element): 将指定的元素,添加到该集合中的指定位置上。
        public E get(int index) :返回集合中指定位置的元素。
        public E remove(int index): 移除列表中指定位置的元素，返回的是被移除的元素。
        public E set(int index, E element): 用指定元素替换集合中指定位置的元素，返回值的更新前的元素。
    注意:
        操作索引的时候，-定要防止索引越界异常

##LinkedList集合的特点:
    1.底层是一个(双向)链表结构:查询慢,增删快
    2.里边包含了大量操作首尾元素的方法
    注意:使用LinkedList集合特有的方法,不能使用多态
        public void addFirst(E e):将指定元素插入此列表的开头。
        public void addLast(E e) :将指定元素添加到此列表的结尾。
        public void push(E e) :将元素推入此列表所表示的堆栈。
        public E getFirst() :返回此列表的第一个元素 。
        public E getLast() :返回此列表的最后-个元素。

        public E removeFirst( ) :移除并返回此列表的第一个元素。
        public E removeList() :移除并返回此列表的最后--个元素。
        public E pop():从此列表所表示的堆栈处弹出--个元素。

        public boolean isEmpty(): 如果列表不包含元素，则返回true。

##vector接口(了解)
    线程同步

Set接口的特点:
    1.不允许存储重复的元素
    2.没有索引，没有带索引的方法,也不能使用普通的for循环遍历
    java.util.HashSet集合implements Set接口
    HashSet特点:
        1.不允许存储重复的元素
        2.没有索引,没有带索引的方法,也不能使用普通的for循环遍历
        3.是一个无序的集合,存储元索和取出元素的顺序有可能不一致
        4.底层是一一个哈希表结构(查询的速度非常的快)

哈希值:是--个十进制的整数，由系统随机给出(就是对象的地址值,是-一个逻辑地址,是模拟出来得到地址,不是数据实际存储的物理地址)
在object类有一个方法，可以获取对象的哈希值
int hashCode() 返回该对象的哈希码值。
hashCode方法的源码:
    public native int hashCode();
    native :代表该方法调用的是本地操作系统的方法
toString方法的源码:
    return getClass().getName() + "@" + Integer. toHexString(hashCode()); .

java.util.LinkedHashSet集合extends HashSet集合
LinkedHashSet集合特点:
底层是一个哈希表(数组+链表/红黑树)+链表:多了-条链表(记录元素的存储顺序).保证元素有序

##Collections
java. utils.collections是集合工具类,用来对集合进行操作。部分方法如下:
    public static <T> boolean addAll(Collection<T> C，T... elements) ):往集合中添加一些元素
    public static void shuffle(List<?> list)打乱顺序了” :打乱集合顺序
    public static <T> void sort(List<T> list) }:将集合中元素按照默认规则排序
    public static <T> void sort(List<T> list ，Comparator<? super T> ) :将集合中元素按照指定规则排序

##java. util .Map<k, v>集合
Map集合的特点:
    1.Map集合是-一个双列集合,-个元素包含两个值(一个key, 一个value)
    2.Map集合中的元素, key和value的数据类型可以相同，也可以不同
    3.Mop集合中的元素, key是不允许重复的, value是可以重复的
    4.Map集合中的元素，key和value是一一对应

public V put(K key, V value): 把指定的键与指定的值添加到Map集合中。
public V remove(object key) :把指定的键所对应的键值对元素在Map集合中删除,返回被删除元素的值。
public V get(object key) 根据指定的键,在Map集合中获取对应的值。
public Set<K> keySet() :获取Map集合中所有的键，存储到Set集合中。
public Set<Map. Entry<K,V>> entrySet() }: 获取到Map集合中所有的键值对对象的集合(Set集合)。
boolean containsKey(object key) 判断集合中是否包含指定的键。

在Map集合中也提供了获取所有Entry对象的方法:
    public Set<Map.Entry<K,V>> entrySet() ;: 获取到Map集合中所有的键值对对象的集合(Set集合)
Entry对象:
    public K getKey():获取Entry对象中的键
    public V getValue():获取Entry对象中的值

##java . util.HashMop<k. v>集合implements Mop<k, v>接口
HashMap集合的特点:
1.HashMap集合底层是哈希表;查询的速度特别的快
    JDK1. 8之前:数组+单向链表
    JDK1. 8之后:数组+单向链表/红黑树(链表的长度超过8):提高查询的速度
    2. hashMap集合是-一个无序的集合,存储元素和取出元素的顺序有可能不一致
    java. util. LinkedHashMap<k, v>集合extends HashMap<k, v>集合
##LinkedHoshMop的特点:
    1.LinkedHashMop集合底层是哈希表+链表(保证迭代的顺序)
    2. LinkedHashMop集合是一个有序的集合 ,存储元素和取出元素的顺序是一致的
java. util. L inkedHashMap<K, V> entends HashMap<K, V>
    Map接口的哈希表和链接列表实现，具有可预知的迭代顺序。
    底层原理:哈希表+链表(记录元素的顺序)

##HashTable 线程同步
java. util . Hashtable<K, Vv>集合implements Mop<K, V>接口
Hashtable:底层也是-一个哈希表是- -个线程安全的集合，是单线程集合,速度慢
HashMap:底层是一个哈希表， 是一个线程不安全的集合,是多线程的集合,速度快
HashMap集合(之前学的所有的集合):可以存储null值，null键
Hashtable集合,不能存储null值, null键
Hashtable和vector集合一样,在jdk1.2版本之后被更先进的集合(HashMap, Arraylist )取代了
Hashtable的子类Properties依然活跃在历史舞台
Properties集合是一个唯一 和I0流相结合的集合
